\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}Preliminaries}{1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Existence of Forward Simulations for Queue Implementations that have Fixed Dequeue Linearization Points}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Herlihy \& Wing Queue Linearizability Proof}{8}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Existence of Forward Simulations for Stack Implementations that have Fixed Pop Linearization Points}{11}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Relaxation for the Data Structures Without Fixed Remove Linearization Points}{11}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces The transition relation of $HWQ$.}}{23}}
\newlabel{fig:transitions:HWQ}{{1}{23}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces The push derivation rules of $TSS$. We only mention the state components that are modified. Unmentioned state components have the names in the algorithm in the prestate. $*n = (a,b,c,d)$ is shorthand for $n->data = a$, $n->ts = b$, ... $n' = n[ts \DOTSB \mapstochar \rightarrow expr]$ is short for $n'->ts = expr$ and all the other fields of $n$ and $n'$ are the same. }}{24}}
\newlabel{fig:transitions:TSSPush}{{2}{24}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces The pop derivation rules of $TSS$. We only mention the state components that are modified. Unmentioned state components have the names in the algorithm in the prestate. $*n = (a,b,c,d)$ is shorthand for $n->data = a$, $n->ts = b$, ... $n' = n[ts \DOTSB \mapstochar \rightarrow expr]$ is short for $n'->ts = expr$ and all the other fields of $n$ and $n'$ are the same. }}{24}}
\newlabel{fig:transitions:TSSPop}{{3}{24}}
